name: PlatformIO Build

on:
  push:
    branches: [ development, main ]
  pull_request:
    branches: [ development, main ]

jobs:
  # Job 1: Validation build with dummy secrets (only runs on PRs to give a quicker feedback)
  build-check:
    runs-on: ubuntu-latest
    name: Build Check (Dummy Secrets)
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: '3.13'

    - name: Cache PlatformIO
      uses: actions/cache@v4
      with:
        path: |
          ~/.platformio
          ~/.cache/pip
        key: ${{ runner.os }}-platformio-${{ hashFiles('**/platformio.ini') }}

    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install platformio

    - name: Create dummy secrets
      working-directory: source
      run: |
        mkdir -p secrets
        echo "dummy" > secrets/privateclaim.pem
        echo "dummy" > secrets/certclaim.pem
        echo "dummy" > secrets/encryptionkey.txt

    - name: Build firmware (esp32s3-prod)
      working-directory: source
      run: |
        echo "🏗️ Building firmware for esp32s3-prod with dummy secrets..."
        pio run -e esp32s3-prod
        echo "✅ Build completed for esp32s3-prod!"

  # Job 2: Production build with real secrets (only runs on push to main/development to also provide the binary)
  build-with-secrets:
    runs-on: ubuntu-latest
    name: Build with Real Secrets (Private)
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/development')

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: '3.13'

    - name: Cache PlatformIO
      uses: actions/cache@v4
      with:
        path: |
          ~/.platformio
          ~/.cache/pip
        key: ${{ runner.os }}-platformio-${{ hashFiles('**/platformio.ini') }}

    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install platformio

    - name: Create secrets directory
      working-directory: source
      run: mkdir -p secrets

    - name: Inject real secrets
      working-directory: source/secrets
      env:
        PRIVATE_CLAIM_PEM: ${{ secrets.PRIVATE_CLAIM_PEM }}
        CERT_CLAIM_PEM: ${{ secrets.CERT_CLAIM_PEM }}
        ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}
      run: |
        echo "🔐 Injecting real secrets..."
        echo "$PRIVATE_CLAIM_PEM" > privateclaim.pem
        echo "$CERT_CLAIM_PEM" > certclaim.pem
        echo "$ENCRYPTION_KEY" > encryptionkey.txt
        echo "✅ Secrets injected successfully"

    - name: Build firmware with real secrets (esp32s3-prod)
      working-directory: source
      run: |
        echo "🏗️ Building firmware for esp32s3-prod with REAL secrets..."
        pio run -e esp32s3-prod
        echo "✅ Production build completed for esp32s3-prod!"

    - name: Upload private firmware artifact
      uses: actions/upload-artifact@v4
      with:
        name: firmware-esp32s3-prod-private-${{ github.sha }}
        path: source/.pio/build/esp32s3-prod/firmware.bin
        retention-days: 30  # Keep for 30 days, adjust as needed

    - name: Cleanup secrets
      if: always()  # Always run, even if build fails
      working-directory: source
      run: |
        echo "🧹 Cleaning up secrets..."
        rm -rf secrets/
        echo "✅ Secrets cleaned up"

    - name: Build summary
      run: |
        echo "### 🎉 Build Successful!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ Firmware built with real secrets" >> $GITHUB_STEP_SUMMARY
        echo "📦 Artifact: \`firmware-esp32s3-prod-private-${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "🔒 **This artifact is PRIVATE** - only accessible to repository members" >> $GITHUB_STEP_SUMMARY
        echo "⏱️ Retention: 30 days" >> $GITHUB_STEP_SUMMARY