name: PlatformIO Build

on:
  push:
    branches: [ development, main ]
  pull_request:
    branches: [ development, main ]

jobs:
  # Job 1: Validation build with dummy secrets (only runs on PRs to give a quicker feedback)
  build-check:
    runs-on: ubuntu-latest
    name: Build Check (Dummy Secrets)
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: '3.11.7' # Same version as PlatformIO installs on its own via VSCode extension

    - name: Cache PlatformIO
      uses: actions/cache@v4
      with:
        path: |
          ~/.platformio
          ~/.cache/pip
        key: ${{ runner.os }}-platformio-${{ hashFiles('**/platformio.ini') }}

    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install platformio

    - name: Extract version
      id: version
      working-directory: source
      run: |
        VERSION=$(grep -oP 'FIRMWARE_BUILD_VERSION_MAJOR "\K\w+' include/constants.h).$(grep -oP 'FIRMWARE_BUILD_VERSION_MINOR "\K\w+' include/constants.h).$(grep -oP 'FIRMWARE_BUILD_VERSION_PATCH "\K\w+' include/constants.h)
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "üìå Detected version: $VERSION"

    - name: Determine build environments
      id: envs
      run: |
        if [[ "${{ github.base_ref }}" == "main" || "${{ github.head_ref }}" == *"main"* ]]; then
          echo "ENV1=esp32s3-prod" >> $GITHUB_OUTPUT
          echo "ENV2=esp32s3-prod-nosecrets" >> $GITHUB_OUTPUT
          echo "ENV_TYPE=prod" >> $GITHUB_OUTPUT
          echo "üì¶ Building PRODUCTION environments"
        else
          echo "ENV1=esp32s3-dev" >> $GITHUB_OUTPUT
          echo "ENV2=esp32s3-dev-nosecrets" >> $GITHUB_OUTPUT
          echo "ENV_TYPE=dev" >> $GITHUB_OUTPUT
          echo "üì¶ Building DEVELOPMENT environments"
        fi

    - name: Create dummy secrets
      working-directory: source
      run: |
        mkdir -p secrets
        echo "dummy" > secrets/privateclaim.pem
        echo "dummy" > secrets/certclaim.pem
        echo "dummy" > secrets/encryptionkey.txt

    - name: Build firmware (${{ steps.envs.outputs.ENV1 }})
      working-directory: source
      run: |
        echo "üèóÔ∏è Building firmware for ${{ steps.envs.outputs.ENV1 }} with dummy secrets..."
        pio run -e ${{ steps.envs.outputs.ENV1 }}
        echo "‚úÖ Build completed for ${{ steps.envs.outputs.ENV1 }}!"

    - name: Build firmware (${{ steps.envs.outputs.ENV2 }})
      working-directory: source
      run: |
        echo "üèóÔ∏è Building firmware for ${{ steps.envs.outputs.ENV2 }}..."
        pio run -e ${{ steps.envs.outputs.ENV2 }}
        echo "‚úÖ Build completed for ${{ steps.envs.outputs.ENV2 }}!"

    - name: Prepare artifacts (${{ steps.envs.outputs.ENV1 }})
      working-directory: source
      run: |
        mkdir -p artifacts/${{ steps.envs.outputs.ENV1 }}
        cp .pio/build/${{ steps.envs.outputs.ENV1 }}/firmware.bin artifacts/${{ steps.envs.outputs.ENV1 }}/energyme_home_${{ steps.version.outputs.VERSION }}.bin
        cp .pio/build/${{ steps.envs.outputs.ENV1 }}/firmware.elf artifacts/${{ steps.envs.outputs.ENV1 }}/energyme_home_${{ steps.version.outputs.VERSION }}.elf
        cp .pio/build/${{ steps.envs.outputs.ENV1 }}/partitions.bin artifacts/${{ steps.envs.outputs.ENV1 }}/partitions.bin
        cp .pio/build/${{ steps.envs.outputs.ENV1 }}/bootloader.bin artifacts/${{ steps.envs.outputs.ENV1 }}/bootloader.bin

    - name: Prepare artifacts (${{ steps.envs.outputs.ENV2 }})
      working-directory: source
      run: |
        mkdir -p artifacts/${{ steps.envs.outputs.ENV2 }}
        cp .pio/build/${{ steps.envs.outputs.ENV2 }}/firmware.bin artifacts/${{ steps.envs.outputs.ENV2 }}/energyme_home_${{ steps.version.outputs.VERSION }}_nosecrets.bin
        cp .pio/build/${{ steps.envs.outputs.ENV2 }}/firmware.elf artifacts/${{ steps.envs.outputs.ENV2 }}/energyme_home_${{ steps.version.outputs.VERSION }}_nosecrets.elf
        cp .pio/build/${{ steps.envs.outputs.ENV2 }}/partitions.bin artifacts/${{ steps.envs.outputs.ENV2 }}/partitions.bin
        cp .pio/build/${{ steps.envs.outputs.ENV2 }}/bootloader.bin artifacts/${{ steps.envs.outputs.ENV2 }}/bootloader.bin

    - name: Upload artifacts (${{ steps.envs.outputs.ENV1 }})
      uses: actions/upload-artifact@v4
      with:
        name: firmware-${{ steps.envs.outputs.ENV1 }}-check-${{ steps.version.outputs.VERSION }}-${{ github.sha }}
        path: source/artifacts/${{ steps.envs.outputs.ENV1 }}/
        retention-days: 7

    - name: Upload artifacts (${{ steps.envs.outputs.ENV2 }})
      uses: actions/upload-artifact@v4
      with:
        name: firmware-${{ steps.envs.outputs.ENV2 }}-check-${{ steps.version.outputs.VERSION }}-${{ github.sha }}
        path: source/artifacts/${{ steps.envs.outputs.ENV2 }}/
        retention-days: 7

  # Job 2: Production build with real secrets (only runs on push to main/development to also provide the binary)
  build-with-secrets:
    runs-on: ubuntu-latest
    name: Build with Real Secrets (Private)
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/development')

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: '3.11.7' # Same version as PlatformIO installs on its own via VSCode extension

    - name: Cache PlatformIO
      uses: actions/cache@v4
      with:
        path: |
          ~/.platformio
          ~/.cache/pip
        key: ${{ runner.os }}-platformio-${{ hashFiles('**/platformio.ini') }}

    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install platformio

    - name: Extract version
      id: version
      working-directory: source
      run: |
        VERSION=$(grep -oP 'FIRMWARE_BUILD_VERSION_MAJOR "\K\w+' include/constants.h).$(grep -oP 'FIRMWARE_BUILD_VERSION_MINOR "\K\w+' include/constants.h).$(grep -oP 'FIRMWARE_BUILD_VERSION_PATCH "\K\w+' include/constants.h)
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "üìå Detected version: $VERSION"

    - name: Determine build environments
      id: envs
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "ENV1=esp32s3-prod" >> $GITHUB_OUTPUT
          echo "ENV2=esp32s3-prod-nosecrets" >> $GITHUB_OUTPUT
          echo "ENV_TYPE=prod" >> $GITHUB_OUTPUT
          echo "üì¶ Building PRODUCTION environments"
        else
          echo "ENV1=esp32s3-dev" >> $GITHUB_OUTPUT
          echo "ENV2=esp32s3-dev-nosecrets" >> $GITHUB_OUTPUT
          echo "ENV_TYPE=dev" >> $GITHUB_OUTPUT
          echo "üì¶ Building DEVELOPMENT environments"
        fi

    - name: Create secrets directory
      working-directory: source
      run: mkdir -p secrets

    - name: Inject real secrets
      working-directory: source/secrets
      env:
        PRIVATE_CLAIM_PEM: ${{ secrets.PRIVATE_CLAIM_PEM }}
        CERT_CLAIM_PEM: ${{ secrets.CERT_CLAIM_PEM }}
        ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}
      run: |
        echo "üîê Injecting real secrets..."
        printf "%s" "$PRIVATE_CLAIM_PEM" > privateclaim.pem
        printf "%s" "$CERT_CLAIM_PEM" > certclaim.pem
        printf "%s" "$ENCRYPTION_KEY" > encryptionkey.txt
        echo "‚úÖ Secrets injected successfully"

    - name: Build firmware with real secrets (${{ steps.envs.outputs.ENV1 }})
      working-directory: source
      run: |
        echo "üèóÔ∏è Building firmware for ${{ steps.envs.outputs.ENV1 }} with REAL secrets..."
        pio run -e ${{ steps.envs.outputs.ENV1 }}
        echo "‚úÖ Build completed for ${{ steps.envs.outputs.ENV1 }}!"

    - name: Build firmware (${{ steps.envs.outputs.ENV2 }})
      working-directory: source
      run: |
        echo "üèóÔ∏è Building firmware for ${{ steps.envs.outputs.ENV2 }}..."
        pio run -e ${{ steps.envs.outputs.ENV2 }}
        echo "‚úÖ Build completed for ${{ steps.envs.outputs.ENV2 }}!"

    - name: Prepare artifacts (${{ steps.envs.outputs.ENV1 }})
      working-directory: source
      run: |
        mkdir -p artifacts/${{ steps.envs.outputs.ENV1 }}
        cp .pio/build/${{ steps.envs.outputs.ENV1 }}/firmware.bin artifacts/${{ steps.envs.outputs.ENV1 }}/energyme_home_${{ steps.version.outputs.VERSION }}.bin
        cp .pio/build/${{ steps.envs.outputs.ENV1 }}/firmware.elf artifacts/${{ steps.envs.outputs.ENV1 }}/energyme_home_${{ steps.version.outputs.VERSION }}.elf
        cp .pio/build/${{ steps.envs.outputs.ENV1 }}/partitions.bin artifacts/${{ steps.envs.outputs.ENV1 }}/partitions.bin
        cp .pio/build/${{ steps.envs.outputs.ENV1 }}/bootloader.bin artifacts/${{ steps.envs.outputs.ENV1 }}/bootloader.bin

    - name: Prepare artifacts (${{ steps.envs.outputs.ENV2 }})
      working-directory: source
      run: |
        mkdir -p artifacts/${{ steps.envs.outputs.ENV2 }}
        cp .pio/build/${{ steps.envs.outputs.ENV2 }}/firmware.bin artifacts/${{ steps.envs.outputs.ENV2 }}/energyme_home_${{ steps.version.outputs.VERSION }}_nosecrets.bin
        cp .pio/build/${{ steps.envs.outputs.ENV2 }}/firmware.elf artifacts/${{ steps.envs.outputs.ENV2 }}/energyme_home_${{ steps.version.outputs.VERSION }}_nosecrets.elf
        cp .pio/build/${{ steps.envs.outputs.ENV2 }}/partitions.bin artifacts/${{ steps.envs.outputs.ENV2 }}/partitions.bin
        cp .pio/build/${{ steps.envs.outputs.ENV2 }}/bootloader.bin artifacts/${{ steps.envs.outputs.ENV2 }}/bootloader.bin

    - name: Upload private firmware artifact (${{ steps.envs.outputs.ENV1 }})
      uses: actions/upload-artifact@v4
      with:
        name: firmware-${{ steps.envs.outputs.ENV1 }}-private-${{ steps.version.outputs.VERSION }}-${{ github.sha }}
        path: source/artifacts/${{ steps.envs.outputs.ENV1 }}/
        retention-days: 30

    - name: Upload firmware artifact (${{ steps.envs.outputs.ENV2 }})
      uses: actions/upload-artifact@v4
      with:
        name: firmware-${{ steps.envs.outputs.ENV2 }}-${{ steps.version.outputs.VERSION }}-${{ github.sha }}
        path: source/artifacts/${{ steps.envs.outputs.ENV2 }}/
        retention-days: 30

    - name: Cleanup secrets
      if: always()  # Always run, even if build fails
      working-directory: source
      run: |
        echo "üßπ Cleaning up secrets..."
        rm -rf secrets/
        echo "‚úÖ Secrets cleaned up"

    - name: Build summary
      run: |
        echo "### üéâ Build Successful!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Version**: \`${{ steps.version.outputs.VERSION }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Environment Type**: \`${{ steps.envs.outputs.ENV_TYPE }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "#### üîê Private Build (${{ steps.envs.outputs.ENV1 }})" >> $GITHUB_STEP_SUMMARY
        echo "‚úÖ Firmware built with real secrets" >> $GITHUB_STEP_SUMMARY
        echo "üì¶ Artifact: \`firmware-${{ steps.envs.outputs.ENV1 }}-private-${{ steps.version.outputs.VERSION }}-${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "üìÑ Files:" >> $GITHUB_STEP_SUMMARY
        echo "  - \`energyme_home_${{ steps.version.outputs.VERSION }}.bin\`" >> $GITHUB_STEP_SUMMARY
        echo "  - \`energyme_home_${{ steps.version.outputs.VERSION }}.elf\`" >> $GITHUB_STEP_SUMMARY
        echo "  - \`partitions.bin\`" >> $GITHUB_STEP_SUMMARY
        echo "üîí **This artifact is PRIVATE** - only accessible to repository members" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "#### üåê Public Build (${{ steps.envs.outputs.ENV2 }})" >> $GITHUB_STEP_SUMMARY
        echo "‚úÖ Firmware built without embedded secrets" >> $GITHUB_STEP_SUMMARY
        echo "üì¶ Artifact: \`firmware-${{ steps.envs.outputs.ENV2 }}-${{ steps.version.outputs.VERSION }}-${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "üìÑ Files:" >> $GITHUB_STEP_SUMMARY
        echo "  - \`energyme_home_${{ steps.version.outputs.VERSION }}_nosecrets.bin\`" >> $GITHUB_STEP_SUMMARY
        echo "  - \`energyme_home_${{ steps.version.outputs.VERSION }}_nosecrets.elf\`" >> $GITHUB_STEP_SUMMARY
        echo "  - \`partitions.bin\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "‚è±Ô∏è Retention: 30 days" >> $GITHUB_STEP_SUMMARY