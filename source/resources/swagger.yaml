openapi: 3.0.0
info:
  title: EnergyMe - Home | API
  description: API documentation for EnergyMe - Home
  version: 1.1.0

servers:
  - url: /
    description: Current server (auto-detected from browser)

paths:
  # Health check endpoint
  /api/v1/health:
    get:
      summary: Health check
      description: Check if the API is running and responsive
      tags:
        - System
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ok"
                  uptime:
                    type: integer
                    format: seconds
                  timestamp:
                    type: string
                    format: date-time

  # Authentication endpoints  
  /api/v1/auth/status:
    get:
      summary: Get authentication status
      description: Check if the current session is authenticated
      tags:
        - Authentication
      responses:
        '200':
          description: Authentication status
          content:
            application/json:
              schema:
                type: object
                properties:
                  usingDefaultPassword:
                    type: boolean
                  username:
                    type: string

  /api/v1/auth/change-password:
    post:
      summary: Change password
      description: Change the authentication password (requires current password for security)
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - currentPassword
                - newPassword
              properties:
                currentPassword:
                  type: string
                  description: Current password for verification
                newPassword:
                  type: string
                  description: New password to set
            example:
              currentPassword: "oldpassword123"
              newPassword: "newpassword456"
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/v1/auth/reset-password:
    post:
      summary: Reset password to default
      description: Reset the authentication password to the default value
      tags:
        - Authentication
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # OTA (Over-The-Air) Update endpoints
  /api/v1/ota/upload:
    post:
      summary: Upload firmware for OTA update
      description: |
        Upload a new firmware binary for over-the-air update.
        
        **Requirements:**
        - File must be in .bin format
        - Minimum file size: 100KB
        - File must contain valid ESP32 firmware
        - Optional: Include X-MD5 header for verification
      tags:
        - OTA Updates
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                firmware:
                  type: string
                  format: binary
                  description: Firmware binary file (.bin format, minimum 100KB)
      parameters:
        - in: header
          name: X-MD5
          required: false
          schema:
            type: string
            pattern: '^[a-f0-9]{32}$'
          description: Optional MD5 hash of the firmware file for verification
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'

  /api/v1/ota/status:
    get:
      summary: Get OTA update status
      description: Get information about the current firmware and update status
      tags:
        - OTA Updates
      responses:
        '200':
          description: OTA status information
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "idle"
                  canRollback:
                    type: boolean
                    example: true
                  currentPartition:
                    type: string
                    example: "app0"
                  hasError:
                    type: boolean
                    example: false
                  lastError:
                    type: string
                    example: "No Error"
                  size:
                    type: integer
                    example: 0
                  progress:
                    type: integer
                    example: 0
                  remaining:
                    type: integer
                    example: 0
                  progressPercent:
                    type: integer
                    example: 0
                  currentVersion:
                    type: string
                    example: "00.11.04"
                  currentMD5:
                    type: string
                    example: "ad1783afd0b38f856d5010921712e2ed"

  /api/v1/ota/rollback:
    post:
      summary: Rollback firmware
      description: Rollback to the previous firmware version
      tags:
        - OTA Updates
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'

  # System Management endpoints
  /api/v1/system/info:
    get:
      summary: Get system information
      description: Get detailed system information including firmware, hardware, and build details
      tags:
        - System
      responses:
        '200':
          description: System information
          content:
            application/json:
              schema:
                type: object
                properties:
                  firmware:
                    type: object
                  hardware:
                    type: object
                  build:
                    type: object
                  uptime:
                    type: object

  /api/v1/system/statistics:
    get:
      summary: Get system statistics
      description: Get runtime statistics and performance metrics
      tags:
        - System
      responses:
        '200':
          description: System statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  ade7953TotalInterrupts:
                    type: integer
                  ade7953TotalHandledInterrupts:
                    type: integer
                  ade7953ReadingCount:
                    type: integer
                  ade7953ReadingCountFailure:
                    type: integer
                  mqttMessagesPublished:
                    type: integer
                  mqttMessagesPublishedError:
                    type: integer
                  customMqttMessagesPublished:
                    type: integer
                  customMqttMessagesPublishedError:
                    type: integer
                  modbusRequests:
                    type: integer
                  modbusRequestsError:
                    type: integer
                  influxdbUploadCount:
                    type: integer
                  influxdbUploadCountError:
                    type: integer
                  wifiConnection:
                    type: integer
                  wifiConnectionError:
                    type: integer
                  webServerRequests:
                    type: integer
                  webServerRequestsError:
                    type: integer
                  logVerbose:
                    type: integer
                  logDebug:
                    type: integer
                  logInfo:
                    type: integer
                  logWarning:
                    type: integer
                  logError:
                    type: integer
                  logFatal:
                    type: integer

  /api/v1/system/restart:
    post:
      summary: Restart the system
      description: Initiate a system restart
      tags:
        - System
      responses:
        '200':
          $ref: '#/components/responses/Success'

  /api/v1/system/factory-reset:
    post:
      summary: Factory reset
      description: Reset the system to factory defaults (clears all configuration)
      tags:
        - System
      responses:
        '200':
          $ref: '#/components/responses/Success'

  /api/v1/system/secrets:
    get:
      summary: Check secrets availability
      description: Check if the system has secrets/certificates available
      tags:
        - System
      responses:
        '200':
          description: Secrets status
          content:
            application/json:
              schema:
                type: object
                properties:
                  hasSecrets:
                    type: boolean

  /api/v1/firmware/update-info:
    get:
      summary: Get firmware update information
      description: Get information about current firmware version, build details, and available updates
      tags:
        - System
      responses:
        '200':
          description: Firmware update information
          content:
            application/json:
              schema:
                type: object
                properties:
                  currentVersion:
                    type: string
                    description: Current firmware version
                    example: "00.11.09"
                  buildDate:
                    type: string
                    description: Firmware build date
                    example: "Aug  3 2025"
                  buildTime:
                    type: string
                    description: Firmware build time
                    example: "14:30:25"
                  availableVersion:
                    type: string
                    description: Available firmware version for update (if available)
                    example: "00.11.10"
                  updateUrl:
                    type: string
                    description: URL for firmware update download (if available)
                    example: "https://github.com/jibrilsharafi/EnergyMe-Home/releases/download/v00.11.10/firmware.bin"
                  isLatest:
                    type: boolean
                    description: Whether the latest firmware version is installed
                    example: false

  # File Operations endpoints
  /api/v1/list-files:
    get:
      summary: List SPIFFS files
      description: Get a list of all files stored in SPIFFS with their sizes
      tags:
        - Files
      responses:
        '200':
          description: List of files with their sizes
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  description: File size in bytes
              example:
                "/logger/log.txt": 2048
                "/logger/config.txt": 256
                "/energy/channel_0.json": 512
                "/calibration/config.json": 128
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/v1/files/{filepath}:
    get:
      summary: Get file content
      description: Download or view the content of a specific file from SPIFFS
      tags:
        - Files
      parameters:
        - name: filepath
          in: path
          required: true
          description: Path to the file in SPIFFS (without leading slash)
          schema:
            type: string
          example: "logger/log.txt"
      responses:
        '200':
          description: File content returned successfully
          content:
            '*/*':
              schema:
                type: string
                format: binary
              examples:
                text_file:
                  summary: Text file content
                  value: "2025-08-03 12:34:56 [INFO] System started"
                json_file:
                  summary: JSON configuration file
                  value: |
                    {
                      "enabled": true,
                      "sampleTime": 1000
                    }
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

  # Network Management endpoints
  /api/v1/network/wifi/reset:
    post:
      summary: Reset WiFi configuration
      description: Reset WiFi settings and restart the WiFi connection
      tags:
        - Network
      responses:
        '200':
          $ref: '#/components/responses/Success'

  # Crash Monitor endpoints
  /api/v1/crash/info:
    get:
      summary: Get crash analysis information
      description: Retrieve comprehensive crash information including reset reason, backtrace, and core dump availability
      tags:
        - Crash Monitor
      responses:
        '200':
          description: Crash information retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  resetReason:
                    type: string
                    example: "Task watchdog"
                  resetReasonCode:
                    type: integer
                    example: 6
                  crashCount:
                    type: integer
                    example: 3
                  consecutiveCrashCount:
                    type: integer
                    example: 0
                  resetCount:
                    type: integer
                    example: 15
                  consecutiveResetCount:
                    type: integer
                    example: 0
                  hasCoreDump:
                    type: boolean
                    example: true
                  coreDumpSize:
                    type: integer
                    example: 40356
                  coreDumpAddress:
                    type: integer
                    example: 16711680
                  taskName:
                    type: string
                    example: "loopTask"
                  programCounter:
                    type: integer
                    example: 1107625244
                  taskControlBlock:
                    type: integer
                    example: 1070273268
                  appElfSha256:
                    type: string
                    example: "820c1a865"
                  backtrace:
                    type: object
                    properties:
                      depth:
                        type: integer
                        example: 2
                      corrupted:
                        type: boolean
                        example: false
                      addresses:
                        type: array
                        items:
                          type: integer
                        example: [1107625244, 1077407178]
                      debugCommand:
                        type: string
                        example: "xtensa-esp32-elf-addr2line -pfC -e .pio/build/esp32dev/firmware.elf 0x4205051c 0x4037edca "
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/v1/crash/dump:
    get:
      summary: Get core dump data
      description: Retrieve core dump binary data as base64-encoded chunks with pagination support
      tags:
        - Crash Monitor
      parameters:
        - name: offset
          in: query
          description: Starting byte offset in the core dump
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
        - name: size
          in: query
          description: Chunk size in bytes
          required: false
          schema:
            type: integer
            default: 2048
            minimum: 1
            maximum: 8192
      responses:
        '200':
          description: Core dump chunk retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalSize:
                    type: integer
                    description: Total size of the core dump
                    example: 4096
                  offset:
                    type: integer
                    description: Starting offset of this chunk
                    example: 0
                  requestedChunkSize:
                    type: integer
                    description: Requested chunk size
                    example: 1024
                  actualChunkSize:
                    type: integer
                    description: Actual chunk size returned
                    example: 1024
                  hasMore:
                    type: boolean
                    description: Whether more data is available
                    example: true
                  encoding:
                    type: string
                    description: Data encoding format
                    example: "base64"
                  data:
                    type: string
                    description: Base64-encoded core dump data
                    example: "SGVsbG8gV29ybGQ="
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/v1/crash/clear:
    post:
      summary: Clear core dump from flash
      description: Remove the stored core dump from flash memory
      tags:
        - Crash Monitor
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'

  # Logging endpoints
  /api/v1/logs/level:
    get:
      summary: Get current log levels
      description: Get the current print and save log levels
      tags:
        - Logging
      responses:
        '200':
          description: Current log levels
          content:
            application/json:
              schema:
                type: object
                properties:
                  print:
                    type: string
                    enum: [VERBOSE, DEBUG, INFO, WARNING, ERROR, FATAL]
                    example: "INFO"
                  save:
                    type: string
                    enum: [VERBOSE, DEBUG, INFO, WARNING, ERROR, FATAL]
                    example: "WARNING"
    put:
      summary: Set log levels (full update)
      description: Update both print and save log levels. Both fields are required for a full update.
      tags:
        - Logging
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - print
                - save
              properties:
                print:
                  $ref: '#/components/schemas/LogLevel'
                  description: Set the print log level
                save:
                  $ref: '#/components/schemas/LogLevel'
                  description: Set the save log level
            example:
              print: "DEBUG"
              save: "ERROR"
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
    patch:
      summary: Update log levels (partial update)
      description: Update one or both log levels. At least one field must be provided.
      tags:
        - Logging
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                print:
                  $ref: '#/components/schemas/LogLevel'
                  description: Set the print log level (optional)
                save:
                  $ref: '#/components/schemas/LogLevel'
                  description: Set the save log level (optional)
              minProperties: 1
            examples:
              print_only:
                summary: Update print level only
                value:
                  print: "DEBUG"
              save_only:
                summary: Update save level only
                value:
                  save: "ERROR"
              both:
                summary: Update both levels
                value:
                  print: "DEBUG"
                  save: "ERROR"
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'

  /api/v1/logs/clear:
    post:
      summary: Clear logs
      description: Clear all stored log entries
      tags:
        - Logging
      responses:
        '200':
          $ref: '#/components/responses/Success'

  # Custom MQTT endpoints
  /api/v1/custom-mqtt/config:
    get:
      summary: Get custom MQTT configuration
      description: Retrieve the current custom MQTT configuration settings
      tags:
        - Custom MQTT
      responses:
        '200':
          description: Current custom MQTT configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomMqttConfiguration'
    put:
      summary: Update custom MQTT configuration (full update)
      description: Update the complete custom MQTT configuration. All required fields must be provided.
      tags:
        - Custom MQTT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomMqttConfiguration'
      responses:
        '200':
          description: Configuration updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid configuration data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      summary: Update custom MQTT configuration (partial update)
      description: Update specific fields in the custom MQTT configuration. Only provided fields will be updated.
      tags:
        - Custom MQTT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                enabled:
                  type: boolean
                  description: Whether custom MQTT is enabled
                server:
                  type: string
                  description: MQTT broker server address or hostname
                  maxLength: 64
                port:
                  type: integer
                  description: MQTT broker port number
                  minimum: 1
                  maximum: 65535
                clientid:
                  type: string
                  description: Unique MQTT client identifier
                  maxLength: 32
                topic:
                  type: string
                  description: MQTT topic for publishing meter data
                  maxLength: 64
                frequency:
                  type: integer
                  description: Publishing frequency in seconds
                  minimum: 1
                  maximum: 3600
                useCredentials:
                  type: boolean
                  description: Whether to use username/password authentication
                username:
                  type: string
                  description: MQTT username
                  maxLength: 32
                password:
                  type: string
                  description: MQTT password
                  maxLength: 64
              minProperties: 1
            examples:
              enable_only:
                summary: Enable MQTT only
                value:
                  enabled: true
              server_config:
                summary: Update server settings
                value:
                  server: "new-mqtt-broker.com"
                  port: 1883
              credentials:
                summary: Update credentials
                value:
                  useCredentials: true
                  username: "new_user"
                  password: "new_password"
      responses:
        '200':
          description: Configuration updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid configuration data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/custom-mqtt/status:
    get:
      summary: Get custom MQTT status
      description: Get the current status and runtime information for custom MQTT
      tags:
        - Custom MQTT
      responses:
        '200':
          description: Custom MQTT status and runtime information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericStatus'

  /api/v1/custom-mqtt/config/reset:
    post:
      summary: Reset custom MQTT configuration
      description: Reset the custom MQTT configuration to default values
      tags:
        - Custom MQTT
      responses:
        '200':
          description: Custom MQTT configuration reset successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # InfluxDB endpoints
  /api/v1/influxdb/config:
    get:
      summary: Get InfluxDB configuration
      description: Retrieve the current InfluxDB configuration settings
      tags:
        - InfluxDB
      responses:
        '200':
          description: Current InfluxDB configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfluxDbConfiguration'
    put:
      summary: Update InfluxDB configuration (full update)
      description: Update the complete InfluxDB configuration. All required fields must be provided.
      tags:
        - InfluxDB
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InfluxDbConfiguration'
      responses:
        '200':
          description: Configuration updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid configuration data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      summary: Update InfluxDB configuration (partial update)
      description: Update specific fields in the InfluxDB configuration. Only provided fields will be updated.
      tags:
        - InfluxDB
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                enabled:
                  type: boolean
                  description: Whether InfluxDB integration is enabled
                server:
                  type: string
                  description: InfluxDB server address or hostname
                  maxLength: 64
                port:
                  type: integer
                  description: InfluxDB server port number
                  minimum: 1
                  maximum: 65535
                version:
                  type: integer
                  description: InfluxDB version (1 or 2)
                  enum: [1, 2]
                database:
                  type: string
                  description: Database name (InfluxDB v1)
                  maxLength: 64
                username:
                  type: string
                  description: Username for authentication (InfluxDB v1)
                  maxLength: 32
                password:
                  type: string
                  description: Password for authentication (InfluxDB v1)
                  maxLength: 64
                organization:
                  type: string
                  description: Organization name (InfluxDB v2)
                  maxLength: 64
                bucket:
                  type: string
                  description: Bucket name (InfluxDB v2)
                  maxLength: 64
                token:
                  type: string
                  description: Authentication token (InfluxDB v2)
                  maxLength: 64
                measurement:
                  type: string
                  description: Measurement name for data points
                  maxLength: 64
                frequency:
                  type: integer
                  description: Data sending frequency in seconds
                  minimum: 1
                  maximum: 3600
                useSSL:
                  type: boolean
                  description: Whether to use HTTPS for connections
              minProperties: 1
            examples:
              enable_only:
                summary: Enable InfluxDB only
                value:
                  enabled: true
              server_config:
                summary: Update server settings
                value:
                  server: "new-influxdb-server.com"
                  port: 8086
              v2_config:
                summary: Update InfluxDB v2 settings
                value:
                  version: 2
                  organization: "my-new-org"
                  bucket: "energy-data"
                  token: "new-auth-token"
      responses:
        '200':
          description: Configuration updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid configuration data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/influxdb/status:
    get:
      summary: Get InfluxDB status
      description: Get the current status and runtime information for InfluxDB
      tags:
        - InfluxDB
      responses:
        '200':
          description: InfluxDB status and runtime information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericStatus'

  /api/v1/influxdb/config/reset:
    post:
      summary: Reset InfluxDB configuration
      description: Reset the InfluxDB configuration to default values
      tags:
        - InfluxDB
      responses:
        '200':
          description: InfluxDB configuration reset successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # LED Management endpoints
  /api/v1/led/brightness:
    get:
      summary: Get LED brightness
      description: Get the current LED brightness level
      tags:
        - LED
      responses:
        '200':
          description: Current LED brightness level
          content:
            application/json:
              schema:
                type: object
                properties:
                  brightness:
                    type: integer
                    description: Current brightness level (0-100)
                    minimum: 0
                    maximum: 100
                    example: 75
                  max_brightness:
                    type: integer
                    description: Maximum possible brightness value
                    example: 100
    put:
      summary: Set LED brightness
      description: Update the LED brightness level
      tags:
        - LED
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - brightness
              properties:
                brightness:
                  type: integer
                  description: Brightness level to set (0-100)
                  minimum: 0
                  maximum: 100
                  example: 75
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'

  # ADE7953 Energy Meter endpoints
  /api/v1/ade7953/config:
    get:
      summary: Get ADE7953 configuration
      description: Retrieve the current ADE7953 energy meter configuration settings
      tags:
        - ADE7953
      responses:
        '200':
          description: Current ADE7953 configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ade7953Configuration'
    put:
      summary: Update ADE7953 configuration (full update)
      description: Update the complete ADE7953 configuration. All required fields must be provided.
      tags:
        - ADE7953
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ade7953Configuration'
      responses:
        '200':
          description: Configuration updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid configuration data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      summary: Update ADE7953 configuration (partial update)
      description: Update specific fields in the ADE7953 configuration. Only provided fields will be updated.
      tags:
        - ADE7953
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                aVGain:
                  type: integer
                  description: Voltage gain calibration
                aIGain:
                  type: integer
                  description: Current gain calibration for channel A
                bIGain:
                  type: integer
                  description: Current gain calibration for channel B
              minProperties: 1
            examples:
              gain_only:
                summary: Update gain settings only
                value:
                  aVGain: 4194304
                  aIGain: 4194304
              calibration:
                summary: Update calibration values
                value:
                  phCalA: 10
                  phCalB: 10
      responses:
        '200':
          description: Configuration updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid configuration data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/ade7953/config/reset:
    post:
      summary: Reset ADE7953 configuration
      description: Reset the ADE7953 configuration to default values
      tags:
        - ADE7953
      responses:
        '200':
          description: ADE7953 configuration reset successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /api/v1/ade7953/sample-time:
    get:
      summary: Get ADE7953 sample time
      description: Get the current sampling time interval in milliseconds
      tags:
        - ADE7953
      responses:
        '200':
          description: Current sample time
          content:
            application/json:
              schema:
                type: object
                properties:
                  sampleTime:
                    type: integer
                    description: Sample time in milliseconds
                    example: 200
    put:
      summary: Set ADE7953 sample time
      description: Update the sampling time interval in milliseconds
      tags:
        - ADE7953
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - sampleTime
              properties:
                sampleTime:
                  type: integer
                  description: Sample time in milliseconds
                  minimum: 200
                  maximum: 20000
                  example: 1000
      responses:
        '200':
          description: Sample time updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequest'

  /api/v1/ade7953/channel:
    get:
      summary: Get channel configuration
      description: Get the configuration for a specific channel
      tags:
        - ADE7953
      parameters:
        - name: index
          in: query
          required: true
          description: Channel index (0-16)
          schema:
            type: integer
            minimum: 0
            maximum: 16
          example: 0
      responses:
        '200':
          description: Channel configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelData'
        '400':
          $ref: '#/components/responses/BadRequest'
    put:
      summary: Update channel configuration (full update)
      description: Update the complete configuration for a specific channel. All fields must be provided including the channel index.
      tags:
        - ADE7953
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChannelData'
      responses:
        '200':
          description: Channel configuration updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
    patch:
      summary: Update channel configuration (partial update)
      description: Update specific fields in a channel configuration. Channel index must be provided.
      tags:
        - ADE7953
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - index
              properties:
                index:
                  type: integer
                  minimum: 0
                  maximum: 16
                  description: Channel index
                active:
                  type: boolean
                  description: Whether the channel is active
                reverse:
                  type: boolean
                  description: Whether to reverse the current direction
                label:
                  type: string
                  maxLength: 32
                  description: Human-readable channel label
                phase:
                  $ref: '#/components/schemas/Phase'
                ctSpecification:
                  $ref: '#/components/schemas/CtSpecification'
              minProperties: 2
            examples:
              enable_channel:
                summary: Enable channel
                value:
                  index: 1
                  active: true
                  label: "Kitchen Circuit"
              ct_config:
                summary: Update CT specifications
                value:
                  index: 2
                  ctSpecification:
                    currentRating: 50.0
                    voltageOutput: 1.0
      responses:
        '200':
          description: Channel configuration updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequest'

  /api/v1/ade7953/channel/reset:
    post:
      summary: Reset channel configuration
      description: Reset a specific channel configuration to default values
      tags:
        - ADE7953
      parameters:
        - name: index
          in: query
          required: true
          description: Channel index (0-16)
          schema:
            type: integer
            minimum: 0
            maximum: 16
          example: 1
      responses:
        '200':
          description: Channel configuration reset successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequest'

  /api/v1/ade7953/register:
    get:
      summary: Read ADE7953 register
      description: Read a value from a specific ADE7953 register
      tags:
        - ADE7953
      parameters:
        - name: address
          in: query
          required: true
          description: Register address (hexadecimal or decimal)
          schema:
            type: integer
          example: 0x031E
        - name: bits
          in: query
          required: true
          description: Number of bits to read (8, 16, 24, or 32)
          schema:
            type: integer
            enum: [8, 16, 24, 32]
          example: 32
        - name: signed
          in: query
          required: false
          description: Whether the data is signed
          schema:
            type: boolean
            default: false
          example: false
      responses:
        '200':
          description: Register value read successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  address:
                    type: integer
                    description: Register address
                  bits:
                    type: integer
                    description: Number of bits
                  signed:
                    type: boolean
                    description: Whether the data is signed
                  value:
                    type: integer
                    description: Register value
        '400':
          $ref: '#/components/responses/BadRequest'
    put:
      summary: Write ADE7953 register
      description: Write a value to a specific ADE7953 register
      tags:
        - ADE7953
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - address
                - bits
                - value
              properties:
                address:
                  type: integer
                  description: Register address (hexadecimal or decimal)
                  example: 0x031E
                bits:
                  type: integer
                  enum: [8, 16, 24, 32]
                  description: Number of bits to write
                  example: 32
                value:
                  type: integer
                  description: Value to write to the register
                  example: 4194304
      responses:
        '200':
          description: Register written successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequest'

  /api/v1/ade7953/meter-values:
    get:
      summary: Get all meter values
      description: Get real-time meter values for all active channels
      tags:
        - ADE7953
      responses:
        '200':
          description: Meter values for all channels
          content:
            application/json:
              schema:
                type: object
                properties:
                  channels:
                    type: array
                    items:
                      $ref: '#/components/schemas/MeterValues'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/v1/ade7953/meter-values/channel:
    get:
      summary: Get single channel meter values
      description: Get real-time meter values for a specific channel
      tags:
        - ADE7953
      parameters:
        - name: index
          in: query
          required: true
          description: Channel index (0-16)
          schema:
            type: integer
            minimum: 0
            maximum: 16
          example: 0
      responses:
        '200':
          description: Meter values for the specified channel
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeterValues'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/v1/ade7953/grid-frequency:
    get:
      summary: Get grid frequency
      description: Get the current AC grid frequency in Hz
      tags:
        - ADE7953
      responses:
        '200':
          description: Current grid frequency
          content:
            application/json:
              schema:
                type: object
                properties:
                  gridFrequency:
                    type: number
                    format: float
                    description: Grid frequency in Hz
                    example: 50.02

  /api/v1/ade7953/energy/reset:
    post:
      summary: Reset all energy values
      description: Reset accumulated energy values for all channels to zero
      tags:
        - ADE7953
      responses:
        '200':
          description: Energy values reset successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /api/v1/ade7953/energy:
    put:
      summary: Set energy values
      description: Set accumulated energy values for a specific channel
      tags:
        - ADE7953
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - channel
              properties:
                channel:
                  type: integer
                  minimum: 0
                  maximum: 16
                  description: Channel index
                  example: 0
                activeEnergyImported:
                  type: number
                  format: float
                  description: Active energy imported in Wh
                  example: 1250.5
                activeEnergyExported:
                  type: number
                  format: float
                  description: Active energy exported in Wh
                  example: 0.0
                reactiveEnergyImported:
                  type: number
                  format: float
                  description: Reactive energy imported in VARh
                  example: 45.2
                reactiveEnergyExported:
                  type: number
                  format: float
                  description: Reactive energy exported in VARh
                  example: 0.0
                apparentEnergy:
                  type: number
                  format: float
                  description: Apparent energy in VAh
                  example: 1251.3
      responses:
        '200':
          description: Energy values updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
tags:
  - name: System
    description: System management and information endpoints
  - name: Authentication
    description: Authentication and security endpoints
  - name: OTA Updates
    description: Over-the-air firmware update endpoints
  - name: Crash Monitor
    description: Crash analysis and core dump management endpoints
  - name: Network
    description: Network and WiFi management endpoints
  - name: Logging
    description: Log management and configuration endpoints
  - name: ADE7953
    description: ADE7953 energy meter configuration, measurement, and control endpoints
  - name: Custom MQTT
    description: Custom MQTT broker configuration and status endpoints
  - name: InfluxDB
    description: InfluxDB time-series database configuration and status endpoints
  - name: LED
    description: LED brightness control and status endpoints
  - name: Files
    description: SPIFFS file system operations and management endpoints

components:
  # Common response patterns
  responses:
    Success:
      description: Operation completed successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SuccessResponse'
    
    BadRequest:
      description: Bad request - invalid input parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            invalid_params:
              summary: Invalid parameters
              value:
                success: false
                error: "Invalid input parameters"
            validation_failed:
              summary: Validation failed
              value:
                success: false
                error: "Request validation failed"
    
    Unauthorized:
      description: Authentication required or invalid credentials
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error: "Authentication required"
    
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error: "Resource not found"
    
    MethodNotAllowed:
      description: HTTP method not allowed for this endpoint
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error: "Method not allowed"
    
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error: "Internal server error occurred"

  schemas:
    SuccessResponse:
      type: object
      required:
        - success
        - message
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Operation completed successfully"
    
    ErrorResponse:
      type: object
      required:
        - success
        - error
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          example: "Error message describing what went wrong"
    
    LogLevel:
      type: string
      enum: [VERBOSE, DEBUG, INFO, WARNING, ERROR, FATAL]
      description: Log level enumeration
    
    CustomMqttConfiguration:
      type: object
      required:
        - enabled
        - server
        - port
        - clientid
        - topic
        - frequency
        - useCredentials
      properties:
        enabled:
          type: boolean
          description: Whether custom MQTT is enabled
          example: false
        server:
          type: string
          description: MQTT broker server address or hostname
          example: "mqtt.test.mosquitto.org"
          maxLength: 64
        port:
          type: integer
          description: MQTT broker port number
          example: 1883
          minimum: 1
          maximum: 65535
        clientid:
          type: string
          description: Unique MQTT client identifier
          example: "energyme-home"
          maxLength: 32
        topic:
          type: string
          description: MQTT topic for publishing meter data
          example: "energy/meter"
          maxLength: 64
        frequency:
          type: integer
          description: Publishing frequency in seconds
          example: 10
          minimum: 1
          maximum: 3600
        useCredentials:
          type: boolean
          description: Whether to use username/password authentication
          example: false
        username:
          type: string
          description: MQTT username (required if useCredentials is true)
          example: "mqtt_user"
          maxLength: 32
        password:
          type: string
          description: MQTT password (required if useCredentials is true)
          example: "mqtt_password"
          maxLength: 64
    
    InfluxDbConfiguration:
      type: object
      required:
        - enabled
        - server
        - port
        - version
        - database
        - username
        - password
        - organization
        - bucket
        - token
        - measurement
        - frequency
        - useSSL
      properties:
        enabled:
          type: boolean
          description: Whether InfluxDB integration is enabled
          example: false
        server:
          type: string
          description: InfluxDB server address or hostname
          example: "localhost"
          maxLength: 64
        port:
          type: integer
          description: InfluxDB server port number
          example: 8086
          minimum: 1
          maximum: 65535
        version:
          type: integer
          description: InfluxDB version (1 or 2)
          example: 2
          enum: [1, 2]
        database:
          type: string
          description: Database name (InfluxDB v1)
          example: "energyme-home"
          maxLength: 64
        username:
          type: string
          description: Username for authentication (InfluxDB v1)
          example: "user"
          maxLength: 32
        password:
          type: string
          description: Password for authentication (InfluxDB v1)
          example: "password"
          maxLength: 64
        organization:
          type: string
          description: Organization name (InfluxDB v2)
          example: "my-org"
          maxLength: 64
        bucket:
          type: string
          description: Bucket name (InfluxDB v2)
          example: "energyme-home"
          maxLength: 64
        token:
          type: string
          description: Authentication token (InfluxDB v2)
          example: "my-token"
          maxLength: 64
        measurement:
          type: string
          description: Measurement name for data points
          example: "meter"
          maxLength: 64
        frequency:
          type: integer
          description: Data sending frequency in seconds
          example: 15
          minimum: 1
          maximum: 3600
        useSSL:
          type: boolean
          description: Whether to use HTTPS for connections
          example: false

    GenericStatus:
      type: object
      required:
        - status
        - statusTimestamp
      properties:
        status:
          type: string
          description: Status of the last operation
          example: "Data sent successfully"
        statusTimestamp:
          type: string
          format: date-time
          description: Timestamp of the last operation
          example: "2025-07-31T12:34:56Z"

    # ADE7953-specific schemas
    Ade7953Configuration:
      type: object
      required:
        - aVGain
        - aIGain
        - bIGain
        - aIRmsOs
        - bIRmsOs
        - aWGain
        - bWGain
        - aWattOs
        - bWattOs
        - aVarGain
        - bVarGain
        - aVarOs
        - bVarOs
        - aVaGain
        - bVaGain
        - aVaOs
        - bVaOs
        - phCalA
        - phCalB
      properties:
        aVGain:
          type: integer
          description: Voltage gain calibration for channel A
          example: 4194304
        aIGain:
          type: integer
          description: Current gain calibration for channel A
          example: 4194304
        bIGain:
          type: integer
          description: Current gain calibration for channel B
          example: 4194304
        aIRmsOs:
          type: integer
          description: RMS current offset for channel A
          example: 0
        bIRmsOs:
          type: integer
          description: RMS current offset for channel B
          example: 0
        aWGain:
          type: integer
          description: Active power gain for channel A
          example: 4194304
        bWGain:
          type: integer
          description: Active power gain for channel B
          example: 4194304
        aWattOs:
          type: integer
          description: Active power offset for channel A
          example: 0
        bWattOs:
          type: integer
          description: Active power offset for channel B
          example: 0
        aVarGain:
          type: integer
          description: Reactive power gain for channel A
          example: 4194304
        bVarGain:
          type: integer
          description: Reactive power gain for channel B
          example: 4194304
        aVarOs:
          type: integer
          description: Reactive power offset for channel A
          example: 0
        bVarOs:
          type: integer
          description: Reactive power offset for channel B
          example: 0
        aVaGain:
          type: integer
          description: Apparent power gain for channel A
          example: 4194304
        bVaGain:
          type: integer
          description: Apparent power gain for channel B
          example: 4194304
        aVaOs:
          type: integer
          description: Apparent power offset for channel A
          example: 0
        bVaOs:
          type: integer
          description: Apparent power offset for channel B
          example: 0
        phCalA:
          type: integer
          description: Phase calibration for channel A
          example: 0
        phCalB:
          type: integer
          description: Phase calibration for channel B
          example: 0

    Phase:
      type: integer
      enum: [1, 2, 3]
      description: Electrical phase assignment
      example: 1

    CtSpecification:
      type: object
      required:
        - currentRating
        - voltageOutput
        - scalingFraction
      properties:
        currentRating:
          type: number
          format: float
          description: CT current rating in Amperes
          example: 30.0
          minimum: 1.0
          maximum: 300.0
        voltageOutput:
          type: number
          format: float
          description: CT voltage output in Volts
          example: 0.333
          minimum: 0.100
          maximum: 1.0
        scalingFraction:
          type: number
          format: float
          description: Scaling adjustment fraction (-0.5 to +0.5 for ±50% adjustment)
          example: 0.0
          minimum: -0.5
          maximum: 0.5

    ChannelData:
      type: object
      required:
        - index
        - active
        - reverse
        - label
        - phase
        - ctSpecification
      properties:
        index:
          type: integer
          minimum: 0
          maximum: 16
          description: Channel index (0-16)
          example: 1
        active:
          type: boolean
          description: Whether the channel is active and monitoring
          example: true
        reverse:
          type: boolean
          description: Whether to reverse the current direction measurement
          example: false
        label:
          type: string
          maxLength: 64
          description: Human-readable channel label
          example: "Kitchen Circuit"
        phase:
          $ref: '#/components/schemas/Phase'
        ctSpecification:
          $ref: '#/components/schemas/CtSpecification'

    MeterValues:
      type: object
      required:
        - voltage
        - current
        - activePower
        - reactivePower
        - apparentPower
        - powerFactor
        - activeEnergyImported
        - activeEnergyExported
        - reactiveEnergyImported
        - reactiveEnergyExported
        - apparentEnergy
      properties:
        voltage:
          type: number
          format: float
          description: RMS voltage in Volts
          example: 230.2
        current:
          type: number
          format: float
          description: RMS current in Amperes
          example: 5.45
        activePower:
          type: number
          format: float
          description: Active power in Watts
          example: 1254.6
        reactivePower:
          type: number
          format: float
          description: Reactive power in VAR
          example: 45.2
        apparentPower:
          type: number
          format: float
          description: Apparent power in VA
          example: 1255.4
        powerFactor:
          type: number
          format: float
          description: Power factor (-1 to 1)
          example: 0.998
          minimum: -1.0
          maximum: 1.0
        activeEnergyImported:
          type: number
          format: float
          description: Accumulated active energy imported in Wh
          example: 12345.6
        activeEnergyExported:
          type: number
          format: float
          description: Accumulated active energy exported in Wh
          example: 0.0
        reactiveEnergyImported:
          type: number
          format: float
          description: Accumulated reactive energy imported in VARh
          example: 456.7
        reactiveEnergyExported:
          type: number
          format: float
          description: Accumulated reactive energy exported in VARh
          example: 0.0
        apparentEnergy:
          type: number
          format: float
          description: Accumulated apparent energy in VAh
          example: 12356.8